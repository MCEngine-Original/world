plugins {
    id 'com.gradleup.shadow' version '9.1.0'
    id 'java'
}

group = 'io.github.mcengine'
version = (findProperty("${project.name}.version") ?: findProperty("version") ?: "0.0.0-SNAPSHOT")

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21) // Minecraft 1.21.x requires Java 21
    }
}

ext {
    // User
    user_git_name = System.getenv('USER_GIT_NAME')
    // GitHub
    user_github_token = System.getenv('USER_GITHUB_TOKEN')
    // Org/Repo
    organization_name = System.getenv('ORGANIZATION_NAME') ?: 'MCEngine-Engine'
    organization_token = System.getenv('ORGANIZATION_TOKEN')
    repository_name = System.getenv('REPOSITORY_NAME') ?: 'world'
    repository_token = System.getenv('REPOSITORY_TOKEN')
    // Project info
    jarName = System.getenv('PROJECT_NAME') ?: 'MCEngineWorld'
}

repositories {
    ext.configureGitHubRepo = { repoName, repoUrl ->
        maven {
            name = repoName
            url = uri(repoUrl)
            credentials {
                username = project.user_git_name
                password = project.user_github_token ?: project.repository_token ?: project.organization_token
            }
        }
    }

    configureGitHubRepo('MCEngine Core API', 'https://maven.pkg.github.com/MCEngine-API/core')

    mavenCentral()
    mavenLocal()

    maven {
        url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots'
        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }

    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://oss.sonatype.org/content/repositories/central' }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.21.8-R0.1-SNAPSHOT'

    implementation 'io.github.mcengine:core-api:2025.0.9-15'
}

processResources {
    def props = [version: version]
    inputs.properties(props)
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') { expand(props) }
}

tasks.named('shadowJar') {
    archiveBaseName.set(project.jarName)
    archiveClassifier.set(null) // produce unclassified fat jar
}

tasks.named('jar') { enabled = false }

tasks.named('build') {
    dependsOn tasks.named('shadowJar')
}
